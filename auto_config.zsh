#!/bin/zsh

function LAUNCH_MASTER_FUNC_auto_config() {
  local is_restore=0
  local is_reserve=0

  local output=''
  local cmd_status=''
  local profile=''

  while (($# > 0)); do
    case $1 in
      "--restore-defaults")
        is_restore=1
      ;;
      "--reserve")
        is_reserve=1
      ;;
      "--init")
        is_restore=0
        is_reserve=0
      ;;
      *)
        echo "Unknown option \""$1"\""
        return 1
      ;;
    esac
    shift
  done

  # backup
  if (($is_restore == 1 && $is_reserve == 1)); then
    mkdir $HOME/.launch_master_backup
    if [[ $cmd_status -ne 0 ]]; then
      echo "Oh no! An error occured when I tried to create .launch_master_backup/ in "$HOME"\n T^T Please check and rerun."
      return 1
    fi
    mkdir $HOME/.launch_master_backup/launch_master_lnks
    mkdir $HOME/.launch_master_backup/launch_master_launch_list
    cp ${LM_VAR["dir_lnks"]}/*.lnk $HOME/.launch_master_backup/launch_master_lnks
    cp ${LM_VAR["dir_launch_list"]}/*.launch_list $HOME/.launch_master_backup/launch_master_launch_list

    rm -r $HOME/.launch_master
  fi

  echo "mkdir $HOME/.launch_master..."
  output=$(mkdir $HOME/.launch_master 2>&1)
  cmd_status=$?

  if [[ $cmd_status -ne 0 ]]; then
    echo "Oh no! An error occured when I tried to create .launch_master/ in "$HOME"\n T^T Please check and rerun."
    return 1
  else
    echo "Create .launch_master successfully ♪(^∇^*)\n"
  fi

  echo "touch $HOME/.launch_master/.launch_masterrc..."
  output=$(touch $HOME/.launch_master/.launch_masterrc 2>&1)
  cmd_status=$?

  if [[ $cmd_status -ne 0 ]]; then
    echo "Oh no! An error occured when I tried to create .launch_master/.launch_masterrc\n T^T Please check and rerun."
    return 1
  else
    echo "Create $HOME/.launch_master/.launch_masterrc successfully ♪(^∇^*)\n"
  fi

  profile="$HOME/.launch_master/.launch_masterrc"
  echo "# >>>>>>>> The following content is auto generated by zsh_launch_master <<<<<<<<" > $profile 


  echo "mkdir $HOME/.launch_master/launch_master_lnks..."
  output=$(mkdir $HOME/.launch_master/launch_master_lnks 2>&1)
  cmd_status=$?

  if [[ $cmd_status -ne 0 ]]; then
    echo "Oh no! An error occured when I tried to create .launch_master/launch_master_lnks\n T^T Please check and rerun."
    return 1
  else
    echo "Create $HOME/.launch_master/launch_master_lnks successfully ♪(^∇^*)\n"
  fi
  echo "dir.lnks=$HOME/.launch_master/launch_master_lnks" >> $profile


  echo "mkdir $HOME/.launch_master/launch_master_launch_list..."
  output=$(mkdir $HOME/.launch_master/launch_master_launch_list 2>&1)
  cmd_status=$?

  if [[ $cmd_status -ne 0 ]]; then
    echo "Oh no! An error occured when I tried to create .launch_master/launch_master_list\n T^T Please check and rerun."
    return 1
  else
    echo "Create $HOME/.launch_master/launch_master_launch_list successfully ♪(^∇^*)\n"
  fi
  echo "dir.launch_list=$HOME/.launch_master/launch_master_launch_list" >> $profile

  echo "I'm checking your OS type..."
  declare open_cmd=''
  case $OSTYPE in
    'msys')
      open_cmd='start'
    ;;
    'linux')
      open_cmd='xdg-open' # depending on xdg-utils
    ;;
    'darwin'|'osx')
      open_cmd='open'
    ;;
    *)
      echo "Warning: Unsupport OS \""$OSTYPE"\"\n\tLaunch Master is unable to launch applications"
      return 1
    ;;
  esac
  echo "sys.open_cmd="$open_cmd"" >> $profile
  echo "Your OS type: \""$OSTYPE"\", is capable for zsh_launch_master ╰(*°▽°*)╯\n"

  echo "sys.alias=launch" >> $profile


  echo "# >>>>>>>> The content above is auto generated by zsh_launch_master <<<<<<<<" >> $profile

  # Recover user files
  if (($is_restore == 1 && $is_reserve == 1)); then
    cp $HOME/.launch_master_backup/launch_master_lnks/*.lnk $HOME/.launch_master/launch_master_lnks
    cp $HOME/.launch_master_backup/launch_master_launch_list/*.launch_list $HOME/.launch_master/launch_master_launch_list
    echo "I have successfully recovered your .lnk and .launch_list files ♪(^∇^*)\n"
    rm -r $HOME/.launch_master_backup
  fi
  
  source $LM_HOME"/config_parser.zsh" $HOME"/.launch_master/.launch_masterrc"
  echo "I have successfully finished auto-config task! Now you can type 'launch' to rerun this script.\nHave a nice day and Good-bye\n♪(￣▽￣)Bye~Bye~"
}

function LAUNCH_MASTER_FUNC_auto_config_restore_defaults() {
  source $LM_HOME"/lib/get_input_path.zsh"
  local opts=''
  local is_reserve=''

  echo -n "Do you want to reserve .lnk and .launch_list files (⊙o⊙)? ----- (y/n)"
  read is_reserve
  if [[ $is_reserve == 'y' ]]; then
    echo "I'm searching the path of your .lnk files..."
    if [[ -z ${LM_VAR["dir_lnks"]} ]]; then
      $LM_FUNC'_get_input_path' -v "LM_VAR["dir_lnks"]" -p "I can't find directory of .lnk files by myself, please input the path of .lnk files\n"
    fi
    echo "Get it!"
    echo "I'm searching the path of your .launch_list files..."
    if [[ -z ${LM_VAR["dir_launch_list"]} ]]; then
      $LM_FUNC'_get_input_path' -v "LM_VAR["dir_launch_list"]" -p "I can't find directory of .launch_list files by myself, please input the path of .launch_list files\n"
    fi
    echo "Get it!"
    opts=$opts"--reserve"
  fi

  echo "Finish collecting infomation: "
  if [[ $is_reserve == 'y' ]]; then
    echo "Reserve .lnk files: "${LM_VAR["dir_lnks"]}
    echo "Reserve .launch_list files: "${LM_VAR["dir_launch_list"]}
    echo
  fi

  unset -f $LM_FUNC'_get_input_path'
  $LM_FUNC'_auto_config' --restore-defaults $opts
}


case $1 in
  '--init')
    echo "I can't find .launch_master/ or .launch_masterrc in "$HOME", maybe it's the first time to boot zsh_launch_master.\nI will try to automatically init launch_master for you...\n"
    $LM_FUNC'_auto_config' --init
  ;;
  '--restore-defaults')
    echo -n "WARNING: This will delete all your custom settings and restore to default. Are you sure (⊙o⊙)? ----- (y/n)"
    read answer
    if [[ $answer != 'y' ]]; then
      echo "Action reject\nBye~Bye~"
    elif [[ $answer == 'y' ]]; then
      $LM_FUNC'_auto_config_restore_defaults'
    fi
  ;;
  *)
    echo "Call from outter scope"
  ;;
esac

unset -f $LM_FUNC'_auto_config'
unset -f $LM_FUNC'_auto_config_restore_defaults'
